/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1, 3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */
class Problem12{

    fun solve(): Long {
        // val n = 1000
        // val triangleNumber = 1000 * (1000 + 1) / 2 76576500

        for(n in 1 .. 14000){
            val triangleNumber = n * (n + 1L) / 2L

            val divisors = getNumberOfDivisors(triangleNumber)

            if(divisors >= 500){
                return triangleNumber
            }
        }

        return 0
    }

    fun getNumberOfDivisors(num: Long): Long {
        var ret = 1L
        var n = num

        var factor = 2L
        while (factor <= n){
            var temp = 1L

            while (n%factor == 0L){
                n /= factor
                temp++
            }

            ret *= temp
            factor ++
        }

        return ret
    }
}